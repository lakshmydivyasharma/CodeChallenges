https://leetcode.com/problems/find-all-duplicates-in-an-array/


/**
 * @param {number[]} nums
 * @return {number[]}
 */
var findDuplicates = function(nums) {
    // create our result and let it equal an empty array
    const result = [];
    
    for(let i = 0; i < nums.length; i++){
        // we want the absolute value bc we are using the addresses between 0 and the range of array, cant have negative (bc its -1 if we visited before)
        // -1 bc its one indexed, its mapping to the one index so -1 bc its not starting at 0 index, its starting at 1 index
        let index= Math.abs(nums[i]) - 1;
        
        // create a variable for the value which is what it is currently in at nums index
        let value = nums[index]
        
        // is that value less than 0? that means we visited it before so we want to push it into the result
        
        if (value < 0){
            result.push(Math.abs(nums[i]));
        }else{
            // otherwise make it negative so it knows for next time 
            nums[index] = -nums[index];
        }
    }
    return result;
};




Solution without notes:
var findDuplicates = function(nums) {
    let result = [];
    
    for(let i=0; i < nums.length; i++){
        let index = Math.abs(nums[i]) - 1;
        let value = nums[index]
        
        if (value < 0){
            result.push(Math.abs(nums[i]));
        }else {
            nums[index] = -nums[index];
        }
    }
    return result 
};




SECOND SOLUTION: OBJECTS

/**
 * @param {number[]} nums
 * @return {number[]}
 
 Object method 
 
 What is a key value pair? 
 Key: Value 
 Name of the property: how many times that key occurs 
 
 
 [4,3,2,7,8,2,3,1]
 keys: {4, 3, 2, 7, 8, 1}
 Key: Value {
 4: 1
 3: 2 
 2: 2
 7: 1
 8: 1
 1: 1 
 }
 
 Why use objects? 
 Great way to track the state of things at once 
 An object can remember details from things that happened before in the code so it makes the call "recursively" 
 So for each value in the array, we can go back and check again and this way we won't have to go back again and count 
 
 Parameter: nums 
 
 Return: An array with our result of numbers that are duplicates 
 
 Example: Refer to the left / top
       Input: nums = [4,3,2,7,8,2,3,1]
       Output: [2,3]
 
 Psuedocode / Edge Cases:
    First for loop: get the raw count and store that raw count in object 
     - create an empty object to track the state 
     - iterate through the array and for each number we are going to set it as a key and then add to its value or give it a 1 
 

    Second for loop: go through the KEYS of the object, find which keys have the value of 2, then push those to the solution 
    - create an empty array --> push duplicates
    - push() method 
    - "let key of Object.keys" 
            keys() method
            counts the number of keys in an object 
    - iterate through to see which keys have a value of 2, push that 
        - if ( something === 2) { push }; return this 


 for (let num of nums){ 
 THIS DOES BOTH OF THESE THINGS: 
        for (let i = 0; i < nums.length; i++){ AND let num = nums[i];

    
Edge case - does the order of the output matter? no 
Edge case - is there a possibility of an empty array? no 
 */




var findDuplicates = function(nums) {
    let countObject = {}; // let the count equal an empty object 
    for (let num of nums){
       if (countObject[num]){  
           countObject[num]++  
       }else {
           countObject[num] = 1 
       }
    }
    
    let result = [];
    for (let key of Object.keys(countObject)){
        if (countObject[key] === 2){ 
            result.push(key)
        } 
    }
    return result; 
};
    


without annotations:
var findDuplicates = function(nums) {
    let counts = {};
    for (let num of nums) {
        if (counts[num]) {
            counts[num]++
        } else {
            counts[num] = 1
        }
    }
    let arr = []
    for (let key of Object.keys(counts)) {
        if (counts[key] === 2) {
            arr.push(key)
        }
    }
    return arr;
};
